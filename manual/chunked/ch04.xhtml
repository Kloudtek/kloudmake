<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Chapter 4. Using Java</title><link href="docbook.css" type="text/css" rel="stylesheet"/><meta content="DocBook XSL Stylesheets V1.78.1" name="generator"/><link rel="prev" href="ch03.xhtml" title="Chapter 3. Using scripting languages"/><link rel="next" href="ch05.xhtml" title="Chapter 5. Credentials Management"/><script xmlns="" type="text/javascript" src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Chapter 4. Using Java</th></tr><tr><td style="text-align: left; width: 20%; "><a accesskey="p" href="ch03.xhtml">Prev</a> </td><th style="text-align: center; width: 60%; "> </th><td style="text-align: right; width: 20%; "> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr></table><hr/></div></header><section class="chapter" id="N40347"><div class="titlepage"><div><div><h1 class="title">Chapter 4. Using Java</h1></div></div></div><div class="toc"><div class="toc-title">Table of Contents</div><ul class="toc"><li><span class="section"><a href="ch04.xhtml#N4034E">Annotation-Driven custom resources</a></span></li><li><span class="section"><a href="ch04.xhtml#N4038D">Field injection</a></span></li><li><span class="section"><a href="ch04.xhtml#N403F6">Resource lifecycle annotations</a></span></li></ul></div>
    
    <section class="section" id="N4034E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Annotation-Driven custom resources</h2></div></div></div>
        
        <p>
            The easiest way to create new resources is to use the SysTyrant annotations.
        </p>
        <p>
            In order to create a resource in java, all you need to do is to annotate a java class with the
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/STResource.html" target="_top">com.kloudtek.systyrant.annotation.STResource</a> annotation,
            jar the compiled classes and place it in the <a class="link" href="ch06.xhtml" title="Chapter 6. Libraries and custom resources auto-load">libraries</a> directory.
        </p>
        <p>
            The @STResource annotation supports a value which will be used as the resource type. If not specified it will
            use the class name (if the class name finishes in 'Resource' that will be stripped off).
        </p>
        <pre class="prettyprint">package com.mycompany.test;
@STResource // This will result in a resource com.mycompany.test.sometest
public void class SomeTest {}</pre>
        <pre class="prettyprint">package com.mycompany.test;
@STResource("stest") // This will result in a resource com.mycompany.test.stest
public void class SomeTest {}</pre>
        <pre class="prettyprint">package com.mycompany.test;
@STResource("stest") // This will result in a resource com.mycompany.test.stest
public void class SomeTest {}</pre>
        <p>
            If the value of @STResource is fully qualified (has dots in it), that will be used as the resource package,
            otherwise the java package will be used. This can be overriden using the
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/STResource.html" target="_top">STResource</a> resource annotation at package level to override this.
        </p>
        <p>
            So if for example the above resource was located in a package 'com.mycompany.test', and you wanted the
            SysTyrant resource package be just 'test', you just needed to created the following file
            <code class="code">package-info.java</code> in that same packages:
        </p>
        <pre class="prettyprint">@com.kloudtek.systyrant.annotation.STResource("test")
package com.mycompany.test;</pre>
        <p>
            Please note it is possible to have multiple classes with the same resource type. This is especially useful
            when used in conjunction with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/OnlyIf.html" target="_top">@OnlyIf</a>
            annotation. For example:
        </p>
        <pre class="prettyprint">@STResource("test.test")
@OnlyIfOperatingSystem( { BSD } )
public class OnlyBSDResource {}

@STResource("test.test")
@OnlyIfOperatingSystem( { LINUX } )
public class OnlyLinuxResource {}</pre>
    </section>
    <section class="section" id="N4038D"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Field injection</h2></div></div></div>
        
        <p>
            Before any such method is invoked, any fields annotated with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Inject.html" target="_top">@Inject</a>
            or <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Attr.html" target="_top">@Attr</a> will be injected with the appropriated data.
        </p>
        <p>
            Fields annotated with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Inject.html" target="_top">@Inject</a> will have the relevant object
            injected into it before any lifecycle annotated method is invoked. The exact resource injected will depend
            on the field type:
        </p>
        <div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
                <p><span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/STContext.html" target="_top">STContext</a></strong></span> :
                    Will result in the context instance being injected (the value of the annotation is ignored).</p>
            </li><li class="listitem">
                <p><span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/Resource.html" target="_top">Resource</a></strong></span> :
                    Will result in the resource with that is associated with this java object to be inject
                    (the value of the annotation is ignored).</p>
            </li><li class="listitem">
                <p><span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/ServiceManager.html" target="_top">ServiceManager</a></strong></span> :
                    Will result in the ServiceManager instance to be injected (the value of the annotation is ignored).</p>
            </li><li class="listitem">
                <p><span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/Host.html" target="_top">Host</a></strong></span> :
                    Will result in the resource <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/Host.html" target="_top">Host</a> being injected (the value of the annotation is ignored).</p>
            </li><li class="listitem">
                <p>Any other type will result in an attribute with an id matching the annotation value (or the field
                name if the value isn't assigned)</p>
            </li></ul></div>
        <p>
            Fields annotated with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Attr.html" target="_top">Attr</a> will result in an attribute with an
            id matching the annotation value (or the field name if the value isn't assigned). Additionally
            <span class="emphasis"><em>after</em></span> any lifecycle method execution,
            any change to the @Attr field will have that value copied into the resource attribute.
        </p>
        <p>
            The <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Attr.html" target="_top">@Attr</a> can also be have the parameter <span class="emphasis"><em>def</em></span>
            which indicates a default value for that attribute (that is assigned when the resource is created).
        </p>
        <pre class="prettyprint">@STResource
public class SomeResource {
    @Attr("path")
    private String filePath;
    @Attr
    private String owner;
    @Attr(value="color", def="blue")
    private String color;
    @Attr(def="100")
    private int weight;
}</pre>
    </section>
    <section class="section" id="N403F6"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource lifecycle annotations</h2></div></div></div>
        
        <p>
            Any method with the following annotations will be executed during their respective lifecycle stage:
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Prepare.html" target="_top">Prepare</a>,
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/PreExecute.html" target="_top">PreExecute</a>,
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Execute.html" target="_top">Execute</a>,
            <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Cleanup.html" target="_top">Cleanup</a>,
        </p>
        <p>
            If any of those annotations has the annotation parameter <span class="emphasis"><em>postChildren</em></span> set to 'true',
            the method will be executed only after all the resource's childrens have completed the relevant stage.
        </p>
        <p>
            The above lifecycle annotations are used to perform methods that do not change the system. For methods that
            will change the environment, you should use the annotations <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Verify.html" target="_top">Verify</a>
            and <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Sync.html" target="_top">Sync</a>.
        </p>
        <pre class="prettyprint">@STResource("world.sky")
public class SkyResource {
  @Attr(def="blue")
  private String color;

  @Verify
  public boolean checkCurrentSkyColor() {
    return Sky.color().equals(color);
  }

  @Sync
  public void setSkyColor() {
    Sky.setColor(color);
  }
}</pre>
        <p>
            The method annotated with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Verify.html" target="_top">Verify</a> should return a boolean that
            indicates if the method annotated with <a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Sync.html" target="_top">Sync</a> should be executed (
            if true it will be executed, if false it will not be executed).
        </p>
        <p>
            Various annotations can be also used in conjunction to specify that the annotated method should only be
            executed if certain conditions are fulfilled:
        </p>
        <p>
            <span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/OnlyIfOperatingSystem.html" target="_top">@OnlyIfOperatingSystem</a></strong></span>
        </p>
        <p>
            This annotation require that the host of the resource runs the specified Operating System. This annotation
            can be used on the class or on specific lifecycle methods.
        </p>
        <pre class="prettyprint">@STResource("test.myres")
@OnlyIfOperatingSystem( { LINUX , BSD } )
public class MyResourceLinuxAndBSDImpl {
  @Execute
  public void doStuff() {
    doSomeStuff();
  }
}

@STResource("test.myres")
@OnlyIfOperatingSystem( WINDOWS )
public class MyResourceWindowsImpl {
  @Execute
  public void doStuff() {
    doSomeStuff();
  }
}

@STResource("test.someres")
public class SomeResource {
  @Execute
  @OnlyIfOperatingSystem( LINUX )
  public void doLinuxSpecificStuff() {
    doStuff();
  }
}</pre>
        <p>
            <span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/OnlyIfArch.html" target="_top">@OnlyIfArch</a></strong></span>
        </p>
        <p>
            This annotation is used to specify that the action should only run if the host's architecture match what is specified (ie. i386, amd64)
        </p>
        <pre class="prettyprint">@STResource("test.myres")
public class MyResourceLinuxAndBSDImpl {
  @Execute
  @OnlyIfArch( I386 )
  public void do32BitStuff() {
    ...
  }

  @Execute
  @OnlyIfArch( AMD64 )
  public void do64BitStuff() {
    ...
  }
}</pre>
        <p>
            <span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/OnlyIf.html" target="_top">@OnlyIf</a></strong></span>
        </p>
        <p>
            This annotation must be used in a method that returns a boolean. The result of that method will indicate if
            lifecycle methods in that class should be executed (if it returns true), or not (if it returns false)
        </p>
        <pre class="prettyprint">@STResource
public class SomeResource {
  @Execute
  public void thisWillOnlyBeExecutedIfSkyIsBlue() {
    // this will only be executed if the method checkIfSkyIsBlue() returns true
    setColorSky("green");
  }

  @OnlyIf
  public boolean checkIfSkyIsBlue() {
    return Sky.color().equals("blue");
  }
}</pre>
        <p>
            <span class="bold"><strong><a class="ulink" href="http://kloudtek.github.io/systyrant/javadocs/index.html?com/kloudtek/systyrant/annotation/Alternative.html" target="_top">@Alternative</a></strong></span>
        </p>
        <p>
            This annotation allows you to specify that a specific action is an alternative, and that at least one should
            be executed (causing an error if none is executed).
        </p>
        <p>
            In the following example, we've got two classes MyResourceLinuxAndBSDImpl (which supports Linux and BSD
            hosts) and MyResourceWindowsImpl (which supports Windows). Because of the @Alternative annotation, if you
            attempted to create a resource on an operating system is neither Linux, BSD or Windows, the execution would fail.
        </p>
        <pre class="prettyprint">@STResource("test.myres")
@OnlyIfOperatingSystem( { LINUX , BSD } )
@Alternative
public class MyResourceLinuxAndBSDImpl {
  @Execute
  public void doStuff() {
    doSomeStuff();
  }
}

@STResource("test.myres")
@OnlyIfOperatingSystem( WINDOWS )
@Alternative
public class MyResourceWindowsImpl {
  @Execute
  public void doStuff() {
    doSomeStuff();
  }
}</pre>
        <p>
            Additionally, alternatives can have a value allowing different set of alternatives to be assigned to a
            resource. In the following example we've got four methods that have @Alternative annotations. Two which are
            related to the Operating System, and two which are related to the architecture. In order for the resource to
            execute successfully, one of the two Operating Systems but apply (so it must be run on either Linux or
            Windows) AND one of the two architecture must also apply (so it must be run on i386 or amd64). Just having
            one of the four won't be sufficient.
        </p>
        <pre class="prettyprint">@STResource("test.myres")
public class MyResource {
  @OnlyIfOperatingSystem( LINUX )
  @Alternative("os")
  @Execute
  public void handleWindows() {
    ...
  }

  @OnlyIfOperatingSystem( WINDOWS )
  @Alternative("os")
  @Execute
  public void handleWindows() {
    ...
  }

  @OnlyIfArch( I386 )
  @Alternative("arch")
  @Execute
  public void handleI386() {
    ...
  }

  @OnlyIfArch( AMD64 )
  @Alternative("arch")
  @Execute
  public void handleAmd64 {
    ...
  }
}</pre>
    </section>
</section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="text-align: left; width: 40%; "><a accesskey="p" href="ch03.xhtml">Prev</a> </td><td style="text-align: center; width: 20%; "> </td><td style="text-align: right; width: 40%; "> <a accesskey="n" href="ch05.xhtml">Next</a></td></tr><tr><td style="vertical-align: top; text-align: left; width: 40%; ">Chapter 3. Using scripting languages </td><td style="text-align: center; width: 20%; "><a accesskey="h" href="index.xhtml">Home</a></td><td style="vertical-align: top; text-align: right; width: 40%; "> Chapter 5. Credentials Management</td></tr></table></div></footer></body></html>