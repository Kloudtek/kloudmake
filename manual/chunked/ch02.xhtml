<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Chapter 2. Using the SysTyrant Language (DSL)</title><link href="docbook.css" type="text/css" rel="stylesheet"/><meta content="DocBook XSL Stylesheets V1.78.1" name="generator"/><link rel="prev" href="ch01.xhtml" title="Chapter 1. Introduction"/><link rel="next" href="ch03.xhtml" title="Chapter 3. Using scripting languages"/><script xmlns="" type="text/javascript" src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"/></head><body><header><div class="navheader"><table style="width: 100%; "><tr><th style="text-align: center; " colspan="3">Chapter 2. Using the SysTyrant Language (DSL)</th></tr><tr><td style="text-align: left; width: 20%; "><a accesskey="p" href="ch01.xhtml">Prev</a> </td><th style="text-align: center; width: 60%; "> </th><td style="text-align: right; width: 20%; "> <a accesskey="n" href="ch03.xhtml">Next</a></td></tr></table><hr/></div></header><section class="chapter" id="N40046"><div class="titlepage"><div><div><h1 class="title">Chapter 2. Using the SysTyrant Language (DSL)</h1></div></div></div><div class="toc"><div class="toc-title">Table of Contents</div><ul class="toc"><li><span class="section"><a href="ch02.xhtml#N4004E">Resource creation</a></span></li><li><span class="section"><a href="ch02.xhtml#N4009C">String handling</a></span></li><li><span class="section"><a href="ch02.xhtml#N400BD">Variables</a></span></li><li><span class="section"><a href="ch02.xhtml#N400E5">Functions</a></span></li><li><span class="section"><a href="ch02.xhtml#N4010E">Query Language</a></span><ul><li><span class="section"><a href="ch02.xhtml#N40116">Match by Id / Uid</a></span></li><li><span class="section"><a href="ch02.xhtml#N40123">Match by Attribute</a></span></li><li><span class="section"><a href="ch02.xhtml#N40189">Match by parent</a></span></li><li><span class="section"><a href="ch02.xhtml#N40237">Match by Type</a></span></li><li><span class="section"><a href="ch02.xhtml#N4024C">Match by Same Host</a></span></li></ul></li><li><span class="section"><a href="ch02.xhtml#N4025F">Resource Dependencies</a></span></li><li><span class="section"><a href="ch02.xhtml#N40290">Resource refresh</a></span></li><li><span class="section"><a href="ch02.xhtml#N402D4">Define custom resources</a></span></li></ul></div>
    
    <section class="section" id="N4004E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource creation</h2></div></div></div>
    
    <p>
        Resources are the primary concept of SysTyrant, each resource has a type (ie core.file), and a number of
        attributes. Some attributes are common to all resource types like for example id and uid, while other
        attributes are specific to each resource type.
    </p>
    <p>
        The easiest way to define resources is to use SysTyrant's DSL to define the resources. Those scripts can
        be created by just naming the file with an .stl file extension. In order to create a resource using the
        DSL, you can use the following syntax:
    </p>
    <p>
        </p><pre class="prettyprint">core.file { path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        This would create a resource of type '<code class="code">core.file</code>' (resource type 'file' in the package 'core',
        with the attribute path set to /tmp/test.txt and the attribute content set to "Hello World". If you save
        this in a file called `test.stl` and run the command<code class="code">systyrant test.stl</code>, this would create
        a file /tmp/test.txt and set the content to "Hello World". If the file already exists and has a
        different content, it would just modify it to the specified content.
    </p>
    <p>
        The DSL also allows a shortcut to specifying the 'id' attribute using the following syntax:
    </p>
    <p>
        </p><pre class="prettyprint">core.file { "testfile": path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        This would be the same as specifying
    </p>
    <p>
        </p><pre class="prettyprint">core.file { id="testfile", path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        You can also easily create multiple resources of the same type using the following syntax:
    </p>
    <pre class="prettyprint">core.file {
    "testfile1": path="/tmp/test1.txt", content="Hello World 1";
    "testfile2": path="/tmp/test2.txt", content="Hello World 2";
}</pre>
    <p>
        When specifying multiple resources, you can also specify attributes which will apply to all such resources using this syntax:
    </p>
    <pre class="prettyprint">core.file( content="Hello World" ) {
    "testfile1": path="/tmp/test1.txt";
    "testfile2": path="/tmp/test2.txt";
}</pre>
    <p>
        If you are repeatedly using resources from a same package, you can having having to type in the package
        name every time by using the import statement:
        </p><pre class="prettyprint">import core;

file { path="/tmp/test1.txt" content="Hello World 1"; }
file { path="/tmp/test2.txt" content="Hello World 2"; }
package { name="ngynx" }</pre><p>
    </p>
    <p>
        Resources can be created as the children of other resources. For example:
        </p><pre class="prettyprint">core.ssh {
    address="server.domain",
    core.file { path="/tmp/test.txt" content="Hello World" },
    core.package {
      "web": name="nginx";
      "db": name="mysql";
    }
}</pre><p>
    </p>
</section>
    <section class="section" id="N4009C"><div class="titlepage"><div><div><h2 class="title" style="clear: both">String handling</h2></div></div></div>
        
        <p>
            Attributes can be specified in three ways:
        </p>
        <div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
                With double quotes
                <pre class="prettyprint">core.file { "testfile": path="/tmp/test.txt" content="HelloWorld" }</pre>
            </li><li class="listitem">
                With single quotes
                <pre class="prettyprint">core.file { 'testfile': path='/tmp/test.txt' content='HelloWorld' }</pre>
            </li><li class="listitem">
                Without quotes if if the value only contains letters, numbers and/or the symbols _/$%^&amp;*!]
                <pre class="prettyprint">core.file { testfile: path="/tmp/test.txt" content=HelloWorld }</pre>
            </li></ul></div>
    </section>
    <section class="section" id="N400BD"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Variables</h2></div></div></div>
        
        <p>Variables can be created by using the following syntax:</p>
        <pre class="prettyprint">core.ssh {
address="server.domain',
$text = "Hello World",
core.file { path="/tmp/test.txt" content="Hello World" },
}</pre>
        <p>
            This would create a variable $text assigned to the core.ssh resource
        </p>
        <p>
            It is possible to use perform variable substitution in strings by using ${variablename} in either a double
            quoted string, or a string without quotes:
            </p><pre class="prettyprint">core.ssh {
    address='server.domain',
    $text = "Hello World",
    core.file {
        path="/tmp/test1.txt" content="${text}"
        path="/tmp/test2.txt" content=${text}
        path='/tmp/test3.txt' content='${text}'
    },
}</pre><p>
        </p>
        <p>
            In this example, the files /tmp/test1.txt and /tmp/test2.txt would contain "Hello World", while /tmp/test3.txt would contain '${text}'.
        </p>
        <p>
            Additionally, a variable string declaration can retrieve attributes in any of it's parents (it will follow through all
            parents until he finds a match).
        </p>
        <pre class="prettyprint">core.ssh {
    address="server.domain",
    core.file {
        path="/tmp/address.txt" content=${address}
    },
}</pre>
        <p>
            In double quoted strings, a slash can be used to escape characters (to create a slash you need to use double slash '\\').
            For example this following DSL would result in the content string being `server.domain \ ${address}`.
        </p>
        <pre class="prettyprint">core.ssh {
    address="server.domain",
    core.file {
        path="/tmp/address.txt" content="${address} \\ \${address} "
    },
}</pre>
    </section>
    <section class="section" id="N400E5"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Functions</h2></div></div></div>
        
        <p>
            A number of functions are provided for use in the DSL (see Functions).
        </p>
        <p>
            For example here's the use of the <code class="code">currentDate()</code> function and of <code class="code">logInfo()</code>:
            </p><pre class="prettyprint">logInfo('hello world')
core.ssh {
    $datestr = currentDate(),
    core.file { path="/tmp/test1.txt" content="It is ${datestr}" },
    core.file { path="/tmp/test2.txt" content="It is ${currentDate()}" },
}</pre><p>
        </p>
        <p>
            Functions can take parameters, for example:
            </p><pre class="prettyprint">doStuff('foo','bar','baz')</pre><p>
            If you don't provide all arguments, they will be passed as their defaults (or null if no default has been set). ie:
            </p><pre class="prettyprint">doStuff('foo','bar','baz')</pre><p>
            Rather than passing the parameters in their order, you can specifically name each assignment
            </p><pre class="prettyprint">doStuff(p1='foo',p2='bar',p3='baz')
doStuff(p2='bar',p3='baz',p1='foo')</pre><p>
            You can also mix both approaches
            </p><pre class="prettyprint">doStuff('foo',p3='baz')</pre><p>
        </p>
    </section>
    <section class="section" id="N4010E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Query Language</h2></div></div></div>
        
        <p>
            The resource query language allows you to write a query to retrieve a specific subset of resources that you might need.
            It supports the following matching capabilities:
        </p>
        <section class="section" id="N40116"><div class="titlepage"><div><div><h3 class="title">Match by Id / Uid</h3></div></div></div>
            
            <p>
                When used with an element in scope (so for example as a value for a `depends` attribute), this match by id (or uid if
                the value has a dot in it) for any sibling resources (so resources which have the same parent). For example:
                </p><pre class="prettyprint">test.test {
  id='parent',
  test.test {
    id='someid',     // This will be matched by the depends='someid' expression
    test.test {
      id='otherid'     // This element would have a uid of 'parent.someid.otherid', but it would be matched by
                       // depends='someid.otherid' since it's declaring element a child of parent1
    }
  }
  test.test {
    depends='someid'
  }
  test.test {
    depends='someid.otherid'
  }
}
foo.bar {
  id='someid',  // This will *NOT* be matched by the depends expression since it doesn't share the same parent
}</pre><p>
            </p>
        </section>
        <section class="section" id="N40123"><div class="titlepage"><div><div><h3 class="title">Match by Attribute</h3></div></div></div>
            
            <p>
                The format for matching by attributes is <code class="code">@[attributename] [operator] [value]</code>.
            </p>
            <p>
                Supported operators are:
            </p>
            <div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
                    <p>
                        Case sensitive match: <code class="code">==</code> or <code class="code">eq</code>
                    </p>
                </li><li class="listitem">
                    <p>
                        Case insensitive match: <code class="code">=</code> or <code class="code">like</code>
                    </p>
                </li><li class="listitem">
                    <p>
                        Regexp matching: <code class="code">~=</code> or <code class="code">regex</code>
                    </p>
                </li><li class="listitem">
                    <p>
                        Less than matching: <code class="code">&lt;</code> or <code class="code">lt</code>
                    </p>
                </li><li class="listitem">
                    <p>
                        More than matching: <code class="code">&gt;</code> or <code class="code">gt</code>
                    </p>
                </li></ul></div>
            <p>
                Negation can be used by adding a 'not' before the operator (<code class="code">@[attributename] not [operator] [value]</code>)
            </p>
            <p>
                In order to check if an attribute is null (or not null), you can use the format of
                <code class="code">@[attributename] is null</code> and <code class="code">@[attributename] is not null</code>.
            </p>
            <p>
                In order to check an attribute is empty (that is either null or an empty string, you can use
                <code class="code">@[attributename] is empty</code> and <code class="code">@[attributename] is not empty</code>.
            </p>
        </section>
        <section class="section" id="N40189"><div class="titlepage"><div><div><h3 class="title">Match by parent</h3></div></div></div>
            
            <p>
                You can match by parent by using <code class="code">childof</code> or <code class="code">childof [expression]</code>.
            </p>
            <p>
                When using <code class="code">childof</code> with an expression, it will resolve the expression, and match any
                resource that is the child of those resources.
            </p>
            <p>
                When used without expression, it will match all childrens of the resource currently being processed
                (this naturally cannot be used outside an STContext execution).
            </p>
            <p>
                In order to recursively match grandchildrens, you need to use <code class="code">childof*</code> or
                <code class="code">childof* [expression]</code>.
            </p>
            <p>
                </p><div class="table" id="N401AB"><div class="table-title">Table 2.1. Childof matching example (assumes resource 1 is the resource currently being processed):</div><div class="table-contents">
                    
                    
                    
                    <table style="width: 50%; border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col style="width: 14%; "/><col style="width: 14%; "/><col style="width: 14%; "/><col style="width: 15%; "/><col style="width: 14%; "/><col style="width: 14%; "/><col style="width: 15%; "/></colgroup><thead><tr><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Resource</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Parent</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Attribute 'foo'</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof @foo eq 'zzz'</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof* @foo eq 'zzz'</th><th style="text-align: left; border-bottom: 0.5pt solid ; ">childof*</th></tr></thead><tbody><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">2</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">zzz</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">4</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">5</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; ">6</td><td style="text-align: left; border-right: 0.5pt solid ; ">5</td><td style="text-align: left; border-right: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; ">X</td><td style="text-align: left; ">X</td></tr></tbody></table>
                </div></div><p><br class="table-break"/>
            </p>
        </section>
        <section class="section" id="N40237"><div class="titlepage"><div><div><h3 class="title">Match by Type</h3></div></div></div>
            
            <p>
                You can match resources of a certain type by using <code class="code">type [fullyqualifiedresourcetype]</code>
            </p>
            <p>
                For example to match all resources of type <code class="code">core.file</code> you could use: <code class="code">type core.file</code>
            </p>
        </section>
        <section class="section" id="N4024C"><div class="titlepage"><div><div><h3 class="title">Match by Same Host</h3></div></div></div>
            
            <p>
                You can match resources that are in the same host by using <code class="code">is samehost</code> or
                <code class="code">is samehost ([query expression])</code>
            </p>
            <p>When using the first version (without a query expression), it will use the resource in scope. This
            will naturally fail if not used by context execution</p>
        </section>
    </section>
    <section class="section" id="N4025F"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource Dependencies</h2></div></div></div>
        
        <p>
            In some cases you might need to have one resource to be executed before another. This can be done by
            declaring a dependency between the two.
        </p>
        <p>
            One way this can be done is by declaring a “before” or an "after" attribute (which value must be a
            valid resource query expression)
        </p>
        <p>
            For example to have a 'core.file' resource depend on a specific 'core.package' resource you could write:
        </p>
        <pre class="prettyprint">new core:package { id = “httpd”, name = “apache-httpd” }
new core:file { id="file", path = “/root/myfile1.txt”, content = “Hello World”, after = “@id = httpd” }</pre>
        <p>
            This could also be written as
        </p>
        <pre class="prettyprint">new core:package { id = “httpd”, name = “apache-httpd”, before = "@id = file" }
new core:file { path = “/root/myfile1.txt”, content = “Hello World” }</pre>
        <p>
            Another way to define a dependency is by using either <code class="code">-&gt;</code> or <code class="code">&gt;-</code>
            between resource creation declarations.
        </p>
        <p>
            So the above example could also be written as
        </p>
        <pre class="prettyprint">new core:package { id = “httpd” name = “apache-httpd” }
-&gt;
new core:file { path = “/root/myfile1.txt”, content = “Hello World” }</pre>
        <p>
            or alternatively
        </p>
        <pre class="prettyprint">new core:file { path = “/root/myfile1.txt”, content = “Hello World” }
&lt;-
new core:package { id = “httpd” name = “apache-httpd” }</pre>
    </section>
    <section class="section" id="N40290"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource refresh</h2></div></div></div>
        
        <p>
            Resources can support refresh actions. The effect of a refresh will depend on the resource, but for example
            when you refresh a <code class="code">core:service</code> that is set as runnable, it will cause the service to be restarted.
        </p>
        <p>
            Refreshing is done using notifications or subscription.
        </p>
        <p>
            A notification can be set by using the common attribute `notify` (the content of which is a resource query
            expression) to specify which resources should be refreshed after the resource is executed.
        </p>
        <p>
            Alternatively you can use the attribute `subscribe` (the content of which is also resource query expression)
            on a resource, and this will cause it to be refresh after the execution of any matching resource.
        </p>
        <p>
            A refresh will only occur if the notifying/subscribed resource is executed after the resource has been
            executed. SysTyrant will try to be as efficient and perform the least refreshes possible. This means:
            </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
                    It will attempt to execute the notifying/subscribed resources before the refreshed resource (if
                    that can be done this will naturally means the refresh will not happen).
                </li><li class="listitem">
                    It will only perform one refresh for multiple notifying/subscribed if those resources have no
                    dependencies on each other (direct or indirect)
                </li></ul></div><p>
        </p>
        <p>
            So for example:
            </p><pre class="prettyprint">core:service { myserver: }
servercfg { config1: notify="@id = myserver" }
servercfg { config2: notify="@id = myserver", after = "@id = myserver" }
servercfg { config3: notify="@id = myserver", after = "@id = myserver" }
servercfg { config4: notify="@id = myserver", after = "@id = config3" }</pre><p>
        </p>
        <p>
            This will result in:
            </p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem">config1 will be executed (no refresh of myserver will occur since it hasn't been executed yet)</li><li class="listitem">myserver will be executed</li><li class="listitem">config2 will be executed</li><li class="listitem">config3 will be executed</li><li class="listitem">myserver will be refreshed</li><li class="listitem">config4 will be executed</li><li class="listitem">myserver will be refreshed</li></ol></div><p>
        </p>
    </section>
    <section class="section" id="N402D4"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Define custom resources</h2></div></div></div>
    
    <p>
        In order to define a new attribute, you can use the 'def' keywork. For example to just create a resource called
        myresource based on the default package (which will be either 'default', or the appropriate package in the case
        of an auto-loaded dsl):
    </p>
    <pre class="prettyprint">def myresource {}</pre>
    <p>
        You can also use a fully qualified resource name if you wish ( in the format of [packagename].[resourcename] )
    </p>
    <pre class="prettyprint">def mypkg.myresource {}</pre>
    <p>
        Inside the definition, you can specify resources which will be created in the PREPARE stage.
    </p>

    <pre class="prettyprint">def mypkg.myresource {
  core:file( path = '/test' ) {}
}</pre>
    <p>
        You can specify that certain attributes will be automatically assigned using this syntax. Those resources
        are available for variable subtitution in resources created.
    </p>
    <pre class="prettyprint">granparesource( gpattr = "hello" ) {
  dadresource( dattr = "world" ) {
    someresource( attr1 = "test", attr2 = $attr1, attr2 = $dattr, attr3 = $gpattr ) {}
  }
}</pre>
</section>
</section><footer><div class="navfooter"><hr/><table style="width: 100%; "><tr><td style="text-align: left; width: 40%; "><a accesskey="p" href="ch01.xhtml">Prev</a> </td><td style="text-align: center; width: 20%; "> </td><td style="text-align: right; width: 40%; "> <a accesskey="n" href="ch03.xhtml">Next</a></td></tr><tr><td style="vertical-align: top; text-align: left; width: 40%; ">Chapter 1. Introduction </td><td style="text-align: center; width: 20%; "><a accesskey="h" href="index.xhtml">Home</a></td><td style="vertical-align: top; text-align: right; width: 40%; "> Chapter 3. Using scripting languages</td></tr></table></div></footer></body></html>