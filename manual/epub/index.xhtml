<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title>SysTyrant Manual</title><link href="docbook-epub.css" type="text/css" rel="stylesheet"/><meta content="DocBook XSL Stylesheets V1.78.1" name="generator"/></head><body><div class="book" title="SysTyrant Manual" id="N40003"><div class="titlepage"><div><div><h1 class="title">SysTyrant Manual</h1></div><div><p class="copyright">Copyright © 2013 Kloudtek Ltd</p></div></div><hr/></div><div class="toc"><div class="toc-title">Table of Contents</div><nav xmlns:epub="http://www.idpf.org/2007/ops" epub:type="toc"><ol><li><a href="#N40019">1. Introduction</a></li><li><a href="#N40046">2. Using the SysTyrant Language (DSL)</a><ol><li><a href="#N4004E">Resource creation</a></li><li><a href="#N4009C">String handling</a></li><li><a href="#N400BD">Variables</a></li><li><a href="#N400E5">Functions</a></li><li><a href="#N4010E">Query Language</a><ol><li><a href="#N40116">Match by Id / Uid</a></li><li><a href="#N40123">Match by Attribute</a></li><li><a href="#N40189">Match by parent</a></li><li><a href="#N40237">Match by Type</a></li><li><a href="#N4024C">Match by Same Host</a></li></ol></li><li><a href="#N4025F">Resource Dependencies</a></li><li><a href="#N40290">Resource refresh</a></li><li><a href="#N402D4">Define custom resources</a></li></ol></li><li><a href="#N402FA">3. Using scripting languages</a></li><li><a href="#N40347">4. Credentials Management</a></li><li><a href="#N40352">5. Libraries and custom resources auto-load</a></li><li><a href="#N40385">6. Execution Lifecycle</a></li><li><a href="#N403DF">A. Common Attributes</a><ol><li><a href="#N403E6">id</a></li><li><a href="#N403F6">uid</a></li><li><a href="#N40406">before</a></li><li><a href="#N40412">after</a></li><li><a href="#N40422">requires</a></li><li><a href="#N4043C">notify</a></li><li><a href="#N40448">subscribe</a></li></ol></li><li><a href="#N40455">B. Built-in functions</a><ol><li><a href="#N4045C">logDebug</a></li><li><a href="#N40472">logInfo</a></li><li><a href="#N40488">logWarning</a></li><li><a href="#N4049E">logError</a></li><li><a href="#N404B4">currentDate</a></li><li><a href="#N404BD">currentDateTime</a></li><li><a href="#N404C6">password</a></li><li><a href="#N404FC">lfile</a></li><li><a href="#N4051D">ufile</a></li></ol></li></ol></nav></div><div class="list-of-tables"><nav epub:type="lot" xmlns:epub="http://www.idpf.org/2007/ops"><h4 class="toc-title">List of Tables</h4><ol><li><a href="#N401AB">2.1. Childof matching example (assumes resource 1 is the resource currently being processed):</a></li></ol></nav></div>
    
    
    <section class="chapter" title="Chapter 1. Introduction" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N40019"><div class="titlepage"><div><div><h1 class="title">Chapter 1. Introduction</h1></div></div></div>
    
    <p>
        SysTyrant is a configuration management tool designed to easily manage even the most complex software
        stacks.
    </p>
    <p>
        In order to use SysTyrant, you just need to create a script defining resources (which can represent any
        elements of a software stack ie: an application, a server, etc), and use the SysTyrant command line tool
        which will perform any required tasks to setup the infrastructure.
    </p>
    <p>
        Some of the main features of SysTyrant are:
    </p>
    <div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">
            <p>
                Has a very powerful and flexible engine designed to easily handle complex enterprise applications.
            </p>
        </li><li class="listitem" epub:type="list-item">
            <p>
                Support to various languages which include's it's own DSL (Domain Specific Language), Java and as
                well as a large number of other scripting languages like Ruby, Python, Javascript and many others.
            </p>
        </li><li class="listitem" epub:type="list-item">
            <p>
                Can manage remote servers using SSH (thus without requiring an agent to be deployed on the server.
            </p>
        </li><li class="listitem" epub:type="list-item">
            <p>
                Automatically creates and manages credentials and cryptographic keys/certificates.
            </p>
        </li></ul></div>
</section>
    <section class="chapter" title="Chapter 2. Using the SysTyrant Language (DSL)" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N40046"><div class="titlepage"><div><div><h1 class="title">Chapter 2. Using the SysTyrant Language (DSL)</h1></div></div></div>
    
    <section class="section" title="Resource creation" epub:type="subchapter" id="N4004E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource creation</h2></div></div></div>
    
    <p>
        Resources are the primary concept of SysTyrant, each resource has a type (ie core.file), and a number of
        attributes. Some attributes are common to all resource types like for example id and uid, while other
        attributes are specific to each resource type.
    </p>
    <p>
        The easiest way to define resources is to use SysTyrant's DSL to define the resources. Those scripts can
        be created by just naming the file with an .stl file extension. In order to create a resource using the
        DSL, you can use the following syntax:
    </p>
    <p>
        </p><pre class="programlisting">core.file { path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        This would create a resource of type '<code class="code">core.file</code>' (resource type 'file' in the package 'core',
        with the attribute path set to /tmp/test.txt and the attribute content set to "Hello World". If you save
        this in a file called `test.stl` and run the command<code class="code">systyrant test.stl</code>, this would create
        a file /tmp/test.txt and set the content to "Hello World". If the file already exists and has a
        different content, it would just modify it to the specified content.
    </p>
    <p>
        The DSL also allows a shortcut to specifying the 'id' attribute using the following syntax:
    </p>
    <p>
        </p><pre class="programlisting">core.file { "testfile": path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        This would be the same as specifying
    </p>
    <p>
        </p><pre class="programlisting">core.file { id="testfile", path="/tmp/test.txt" content="Hello World" }</pre><p>
    </p>
    <p>
        You can also easily create multiple resources of the same type using the following syntax:
    </p>
    <pre class="programlisting">core.file {
    "testfile1": path="/tmp/test1.txt", content="Hello World 1";
    "testfile2": path="/tmp/test2.txt", content="Hello World 2";
}</pre>
    <p>
        When specifying multiple resources, you can also specify attributes which will apply to all such resources using this syntax:
    </p>
    <pre class="programlisting">core.file( content="Hello World" ) {
    "testfile1": path="/tmp/test1.txt";
    "testfile2": path="/tmp/test2.txt";
}</pre>
    <p>
        If you are repeatedly using resources from a same package, you can having having to type in the package
        name every time by using the import statement:
        </p><pre class="programlisting">import core;

file { path="/tmp/test1.txt" content="Hello World 1"; }
file { path="/tmp/test2.txt" content="Hello World 2"; }
package { name="ngynx" }</pre><p>
    </p>
    <p>
        Resources can be created as the children of other resources. For example:
        </p><pre class="programlisting">core.ssh {
    address="server.domain",
    core.file { path="/tmp/test.txt" content="Hello World" },
    core.package {
      "web": name="nginx";
      "db": name="mysql";
    }
}</pre><p>
    </p>
</section>
    <section class="section" title="String handling" epub:type="subchapter" id="N4009C"><div class="titlepage"><div><div><h2 class="title" style="clear: both">String handling</h2></div></div></div>
        
        <p>
            Attributes can be specified in three ways:
        </p>
        <div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">
                With double quotes
                <pre class="programlisting">core.file { "testfile": path="/tmp/test.txt" content="HelloWorld" }</pre>
            </li><li class="listitem" epub:type="list-item">
                With single quotes
                <pre class="programlisting">core.file { 'testfile': path='/tmp/test.txt' content='HelloWorld' }</pre>
            </li><li class="listitem" epub:type="list-item">
                Without quotes if if the value only contains letters, numbers and/or the symbols _/$%^&amp;*!]
                <pre class="programlisting">core.file { testfile: path="/tmp/test.txt" content=HelloWorld }</pre>
            </li></ul></div>
    </section>
    <section class="section" title="Variables" epub:type="subchapter" id="N400BD"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Variables</h2></div></div></div>
        
        <p>Variables can be created by using the following syntax:</p>
        <pre class="programlisting">core.ssh {
address="server.domain',
$text = "Hello World",
core.file { path="/tmp/test.txt" content="Hello World" },
}</pre>
        <p>
            This would create a variable $text assigned to the core.ssh resource
        </p>
        <p>
            It is possible to use perform variable substitution in strings by using ${variablename} in either a double
            quoted string, or a string without quotes:
            </p><pre class="programlisting">core.ssh {
    address='server.domain',
    $text = "Hello World",
    core.file {
        path="/tmp/test1.txt" content="${text}"
        path="/tmp/test2.txt" content=${text}
        path='/tmp/test3.txt' content='${text}'
    },
}</pre><p>
        </p>
        <p>
            In this example, the files /tmp/test1.txt and /tmp/test2.txt would contain "Hello World", while /tmp/test3.txt would contain '${text}'.
        </p>
        <p>
            Additionally, a variable string declaration can retrieve attributes in any of it's parents (it will follow through all
            parents until he finds a match).
        </p>
        <pre class="programlisting">core.ssh {
    address="server.domain",
    core.file {
        path="/tmp/address.txt" content=${address}
    },
}</pre>
        <p>
            In double quoted strings, a slash can be used to escape characters (to create a slash you need to use double slash '\\').
            For example this following DSL would result in the content string being `server.domain \ ${address}`.
        </p>
        <pre class="programlisting">core.ssh {
    address="server.domain",
    core.file {
        path="/tmp/address.txt" content="${address} \\ \${address} "
    },
}</pre>
    </section>
    <section class="section" title="Functions" epub:type="subchapter" id="N400E5"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Functions</h2></div></div></div>
        
        <p>
            A number of functions are provided for use in the DSL (see Functions).
        </p>
        <p>
            For example here's the use of the <code class="code">currentDate()</code> function and of <code class="code">logInfo()</code>:
            </p><pre class="programlisting">logInfo('hello world')
core.ssh {
    $datestr = currentDate(),
    core.file { path="/tmp/test1.txt" content="It is ${datestr}" },
    core.file { path="/tmp/test2.txt" content="It is ${currentDate()}" },
}</pre><p>
        </p>
        <p>
            Functions can take parameters, for example:
            </p><pre class="programlisting">doStuff('foo','bar','baz')</pre><p>
            If you don't provide all arguments, they will be passed as their defaults (or null if no default has been set). ie:
            </p><pre class="programlisting">doStuff('foo','bar','baz')</pre><p>
            Rather than passing the parameters in their order, you can specifically name each assignment
            </p><pre class="programlisting">doStuff(p1='foo',p2='bar',p3='baz')
doStuff(p2='bar',p3='baz',p1='foo')</pre><p>
            You can also mix both approaches
            </p><pre class="programlisting">doStuff('foo',p3='baz')</pre><p>
        </p>
    </section>
    <section class="section" title="Query Language" epub:type="subchapter" id="N4010E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Query Language</h2></div></div></div>
        
        <p>
            The resource query language allows you to write a query to retrieve a specific subset of resources that you might need.
            It supports the following matching capabilities:
        </p>
        <section class="section" title="Match by Id / Uid" epub:type="division" id="N40116"><div class="titlepage"><div><div><h3 class="title">Match by Id / Uid</h3></div></div></div>
            
            <p>
                When used with an element in scope (so for example as a value for a `depends` attribute), this match by id (or uid if
                the value has a dot in it) for any sibling resources (so resources which have the same parent). For example:
                </p><pre class="programlisting">test.test {
  id='parent',
  test.test {
    id='someid',     // This will be matched by the depends='someid' expression
    test.test {
      id='otherid'     // This element would have a uid of 'parent.someid.otherid', but it would be matched by
                       // depends='someid.otherid' since it's declaring element a child of parent1
    }
  }
  test.test {
    depends='someid'
  }
  test.test {
    depends='someid.otherid'
  }
}
foo.bar {
  id='someid',  // This will *NOT* be matched by the depends expression since it doesn't share the same parent
}</pre><p>
            </p>
        </section>
        <section class="section" title="Match by Attribute" epub:type="division" id="N40123"><div class="titlepage"><div><div><h3 class="title">Match by Attribute</h3></div></div></div>
            
            <p>
                The format for matching by attributes is <code class="code">@[attributename] [operator] [value]</code>.
            </p>
            <p>
                Supported operators are:
            </p>
            <div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">
                    <p>
                        Case sensitive match: <code class="code">==</code> or <code class="code">eq</code>
                    </p>
                </li><li class="listitem" epub:type="list-item">
                    <p>
                        Case insensitive match: <code class="code">=</code> or <code class="code">like</code>
                    </p>
                </li><li class="listitem" epub:type="list-item">
                    <p>
                        Regexp matching: <code class="code">~=</code> or <code class="code">regex</code>
                    </p>
                </li><li class="listitem" epub:type="list-item">
                    <p>
                        Less than matching: <code class="code">&lt;</code> or <code class="code">lt</code>
                    </p>
                </li><li class="listitem" epub:type="list-item">
                    <p>
                        More than matching: <code class="code">&gt;</code> or <code class="code">gt</code>
                    </p>
                </li></ul></div>
            <p>
                Negation can be used by adding a 'not' before the operator (<code class="code">@[attributename] not [operator] [value]</code>)
            </p>
            <p>
                In order to check if an attribute is null (or not null), you can use the format of
                <code class="code">@[attributename] is null</code> and <code class="code">@[attributename] is not null</code>.
            </p>
            <p>
                In order to check an attribute is empty (that is either null or an empty string, you can use
                <code class="code">@[attributename] is empty</code> and <code class="code">@[attributename] is not empty</code>.
            </p>
        </section>
        <section class="section" title="Match by parent" epub:type="division" id="N40189"><div class="titlepage"><div><div><h3 class="title">Match by parent</h3></div></div></div>
            
            <p>
                You can match by parent by using <code class="code">childof</code> or <code class="code">childof [expression]</code>.
            </p>
            <p>
                When using <code class="code">childof</code> with an expression, it will resolve the expression, and match any
                resource that is the child of those resources.
            </p>
            <p>
                When used without expression, it will match all childrens of the resource currently being processed
                (this naturally cannot be used outside an STContext execution).
            </p>
            <p>
                In order to recursively match grandchildrens, you need to use <code class="code">childof*</code> or
                <code class="code">childof* [expression]</code>.
            </p>
            <p>
                </p><div class="table" id="N401AB"><div class="table-title">Table 2.1. Childof matching example (assumes resource 1 is the resource currently being processed):</div><div class="table-contents">
                    
                    
                    
                    <table style="width: 50%; border-collapse: collapse; border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col/><col/><col/><col/><col/><col/><col/></colgroup><thead><tr><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Resource</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Parent</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Attribute 'foo'</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof @foo eq 'zzz'</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof</th><th style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">childof* @foo eq 'zzz'</th><th style="text-align: left; border-bottom: 0.5pt solid ; ">childof*</th></tr></thead><tbody><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; "> </td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">2</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">1</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">zzz</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">4</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">5</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">3</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">X</td><td style="text-align: left; border-bottom: 0.5pt solid ; ">X</td></tr><tr><td style="text-align: left; border-right: 0.5pt solid ; ">6</td><td style="text-align: left; border-right: 0.5pt solid ; ">5</td><td style="text-align: left; border-right: 0.5pt solid ; ">bar</td><td style="text-align: left; border-right: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; "> </td><td style="text-align: left; border-right: 0.5pt solid ; ">X</td><td style="text-align: left; ">X</td></tr></tbody></table>
                </div></div><p>
            </p>
        </section>
        <section class="section" title="Match by Type" epub:type="division" id="N40237"><div class="titlepage"><div><div><h3 class="title">Match by Type</h3></div></div></div>
            
            <p>
                You can match resources of a certain type by using <code class="code">type [fullyqualifiedresourcetype]</code>
            </p>
            <p>
                For example to match all resources of type <code class="code">core.file</code> you could use: <code class="code">type core.file</code>
            </p>
        </section>
        <section class="section" title="Match by Same Host" epub:type="division" id="N4024C"><div class="titlepage"><div><div><h3 class="title">Match by Same Host</h3></div></div></div>
            
            <p>
                You can match resources that are in the same host by using <code class="code">is samehost</code> or
                <code class="code">is samehost ([query expression])</code>
            </p>
            <p>When using the first version (without a query expression), it will use the resource in scope. This
            will naturally fail if not used by context execution</p>
        </section>
    </section>
    <section class="section" title="Resource Dependencies" epub:type="subchapter" id="N4025F"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource Dependencies</h2></div></div></div>
        
        <p>
            In some cases you might need to have one resource to be executed before another. This can be done by
            declaring a dependency between the two.
        </p>
        <p>
            One way this can be done is by declaring a “before” or an "after" attribute (which value must be a
            valid resource query expression)
        </p>
        <p>
            For example to have a 'core.file' resource depend on a specific 'core.package' resource you could write:
        </p>
        <pre class="programlisting">new core:package { id = “httpd”, name = “apache-httpd” }
new core:file { id="file", path = “/root/myfile1.txt”, content = “Hello World”, after = “@id = httpd” }</pre>
        <p>
            This could also be written as
        </p>
        <pre class="programlisting">new core:package { id = “httpd”, name = “apache-httpd”, before = "@id = file" }
new core:file { path = “/root/myfile1.txt”, content = “Hello World” }</pre>
        <p>
            Another way to define a dependency is by using either <code class="code">-&gt;</code> or <code class="code">&gt;-</code>
            between resource creation declarations.
        </p>
        <p>
            So the above example could also be written as
        </p>
        <pre class="programlisting">new core:package { id = “httpd” name = “apache-httpd” }
-&gt;
new core:file { path = “/root/myfile1.txt”, content = “Hello World” }</pre>
        <p>
            or alternatively
        </p>
        <pre class="programlisting">new core:file { path = “/root/myfile1.txt”, content = “Hello World” }
&lt;-
new core:package { id = “httpd” name = “apache-httpd” }</pre>
    </section>
    <section class="section" title="Resource refresh" epub:type="subchapter" id="N40290"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Resource refresh</h2></div></div></div>
        
        <p>
            Resources can support refresh actions. The effect of a refresh will depend on the resource, but for example
            when you refresh a <code class="code">core:service</code> that is set as runnable, it will cause the service to be restarted.
        </p>
        <p>
            Refreshing is done using notifications or subscription.
        </p>
        <p>
            A notification can be set by using the common attribute `notify` (the content of which is a resource query
            expression) to specify which resources should be refreshed after the resource is executed.
        </p>
        <p>
            Alternatively you can use the attribute `subscribe` (the content of which is also resource query expression)
            on a resource, and this will cause it to be refresh after the execution of any matching resource.
        </p>
        <p>
            A refresh will only occur if the notifying/subscribed resource is executed after the resource has been
            executed. SysTyrant will try to be as efficient and perform the least refreshes possible. This means:
            </p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">
                    It will attempt to execute the notifying/subscribed resources before the refreshed resource (if
                    that can be done this will naturally means the refresh will not happen).
                </li><li class="listitem" epub:type="list-item">
                    It will only perform one refresh for multiple notifying/subscribed if those resources have no
                    dependencies on each other (direct or indirect)
                </li></ul></div><p>
        </p>
        <p>
            So for example:
            </p><pre class="programlisting">core:service { myserver: }
servercfg { config1: notify="@id = myserver" }
servercfg { config2: notify="@id = myserver", after = "@id = myserver" }
servercfg { config3: notify="@id = myserver", after = "@id = myserver" }
servercfg { config4: notify="@id = myserver", after = "@id = config3" }</pre><p>
        </p>
        <p>
            This will result in:
            </p><div class="orderedlist" epub:type="list"><ol class="orderedlist" type="1"><li class="listitem" epub:type="list-item">config1 will be executed (no refresh of myserver will occur since it hasn't been executed yet)</li><li class="listitem" epub:type="list-item">myserver will be executed</li><li class="listitem" epub:type="list-item">config2 will be executed</li><li class="listitem" epub:type="list-item">config3 will be executed</li><li class="listitem" epub:type="list-item">myserver will be refreshed</li><li class="listitem" epub:type="list-item">config4 will be executed</li><li class="listitem" epub:type="list-item">myserver will be refreshed</li></ol></div><p>
        </p>
    </section>
    <section class="section" title="Define custom resources" epub:type="subchapter" id="N402D4"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Define custom resources</h2></div></div></div>
    
    <p>
        In order to define a new attribute, you can use the 'def' keywork. For example to just create a resource called
        myresource based on the default package (which will be either 'default', or the appropriate package in the case
        of an auto-loaded dsl):
    </p>
    <pre class="programlisting">def myresource {}</pre>
    <p>
        You can also use a fully qualified resource name if you wish ( in the format of [packagename].[resourcename] )
    </p>
    <pre class="programlisting">def mypkg.myresource {}</pre>
    <p>
        Inside the definition, you can specify resources which will be created in the PREPARE stage.
    </p>

    <pre class="programlisting">def mypkg.myresource {
  core:file( path = '/test' ) {}
}</pre>
    <p>
        You can specify that certain attributes will be automatically assigned using this syntax. Those resources
        are available for variable subtitution in resources created.
    </p>
    <pre class="programlisting">granparesource( gpattr = "hello" ) {
  dadresource( dattr = "world" ) {
    someresource( attr1 = "test", attr2 = $attr1, attr2 = $dattr, attr3 = $gpattr ) {}
  }
}</pre>
</section>
</section>
    <section class="chapter" title="Chapter 3. Using scripting languages" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N402FA"><div class="titlepage"><div><div><h1 class="title">Chapter 3. Using scripting languages</h1></div></div></div>
    
    <p>
        Creating resources using other scripting languages is quite easy, all you need to do is to create a script in the language
        of your choice (as long as it's a supported one of course), and use the command line tool to run the script.
    </p>
    <p>
        Non-DSL scripting languages will have automatically the following global variables set:
    </p>
    <table style="border: 0; " class="simplelist" epub:type="list"><tr><td><span class="strong"><strong>package</strong></span>: Package of the script</td></tr><tr><td><span class="strong"><strong>ctx</strong></span>: SysTyrant Context (the java STContext instance).</td></tr><tr><td><span class="strong"><strong>stsm</strong></span>: SysTyrant Service Manager.</td></tr><tr><td><span class="strong"><strong>strm</strong></span>: SysTyrant Resource Manager.</td></tr></table>
    <p>
        Those can then be used to perform any required functions. For example, if you wanted to use ruby to perform the
        same file creation as described previously, you could create a file named `test.rb` with the following content:
        </p><pre class="programlisting">myfileres = $strm.createResource( "core.file", "testfile" )
myfileres.set( { path =&gt; "/tmp/test.txt", content =&gt; "Hello World" } )
</pre><p>
        and then execute the file using <code class="code">systyrant test.rb</code>
    </p>
    <p>
        Additionally some scripting languages will automatically load some wrapper code to facilitate development:
    </p>
    <p>
        Ruby:
        </p><pre class="programlisting">require "java"
java_import com.kloudtek.systyrant.AbstractTask

module SysTyrant
  class Task &lt; AbstractTask

  end

  def SysTyrant.create(type, id=nil, attrs=nil, parent=nil)
    $strm.create(type, id, attrs, parent)
  end
end
</pre><p>
    </p>
    <p>
        In ruby, the above function could be written as:
        </p><pre class="programlisting">myfileres = SysTyrant.create( 'core.file', "testfile", { path =&gt; '/tmp/test.txt', content =&gt; "Hello World" } )
</pre><p>
    </p>
    <p>
        Parent / Children relationships can be set on creation by using the parent parameter:
        </p><pre class="programlisting">sshresource = SysTyrant.create( "core.ssh", "serverid", { address =&gt; "server.domain" } )

SysTyrant.create( "core.file", "fileid", { path =&gt; "/tmp/test.txt", content =&gt; "Hello World" }, sshresource )
SysTyrant.create( "core.package", attrs={ name = "mysql" }, parent=sshresource )
$strm.createResource( "core.package", "web", sshresource ).set( { name =&gt; "nginx" } )
</pre><p>
    </p>
</section>
    <section class="chapter" title="Chapter 4. Credentials Management" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N40347"><div class="titlepage"><div><div><h1 class="title">Chapter 4. Credentials Management</h1></div></div></div>
    
    <p/>
</section>
    <section class="chapter" title="Chapter 5. Libraries and custom resources auto-load" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N40352"><div class="titlepage"><div><div><h1 class="title">Chapter 5. Libraries and custom resources auto-load</h1></div></div></div>
    
    <p>
        In order to better allow reuse and distribution of custom resource types, systyrant support the concept of libraries.
        A library is a zip file, a jar file or a directory that is deployed in one of the libraries directories in systyrant.
    </p>
    <p>
        By default SysTyrant will look for libraries under the following directories:
    </p>
    <div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>/etc/systyrant/libs</p></li><li class="listitem" epub:type="list-item"><p>/var/lib/systyrant/libs</p></li><li class="listitem" epub:type="list-item"><p>~/.systyrant/libs</p></li></ul></div>
    <p>
        It's also possible to specify additional locations by using the command line's <code class="code">-l</code> optional parameter.
    </p>
    <p>
        Any java custom resources or functions located in a library will be automatically identified and loaded.
    </p>
    <p>
        When a non-java resource type is used, SysTyrant will attempt to find and run a script file under the following path:
         [package name with any dot changed into a slash]/[resource type name].stl
    </p>
    <p>
        For example, if you attempted to instantiate a resource of type <code class="code">mycompany.customres.SomeResource</code> and it couldn't
        find a corresponding java resource, it would attempt to find and run the file
        <code class="code">mycompany/customres/SomeResource.stl</code>.
    </p>
</section>
    <section class="chapter" title="Chapter 6. Execution Lifecycle" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="chapter" id="N40385"><div class="titlepage"><div><div><h1 class="title">Chapter 6. Execution Lifecycle</h1></div></div></div>
    
    <p>
        When a systyrant context is executed, it will go through the following lifecycle stages:
    </p>
    <p>
        <span class="bold"><strong>Prepare Stage</strong></span>
    </p>
    <p>
        At this stage, it will iterate through every resource and call their PREPARE actions until there are no more
        unprocessed resources for this stage.
    </p>
    <p>
        After this is done it will:
        </p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>Validate all resources attributes</p></li><li class="listitem" epub:type="list-item"><p>For every resource which has no 'id' attribute, it will generate one. It will use the
                resource's type name with a number (starting at 1, incrementing it until it generates a valid id).
                So a core.file resource with no id will generate a 'file1' id if there are no sibling resources with
                that id already.</p></li><li class="listitem" epub:type="list-item"><p>
                For every resource which has no 'uid' attribute, it will generate one. If the resource has a parent,
                the uid will be generated in the format of '[parent uid].[resource id]'. If it has no parent then
                it will just use the resource id.
            </p></li><li class="listitem" epub:type="list-item">
                <p>It will re-order the resources based on their dependencies and notifications/subscriptions</p>
            </li></ul></div><p>
    </p>
    <p>
        <span class="bold"><strong>Execute Stage</strong></span>
    </p>
    <p>
        <span class="emphasis"><em>Note: From this point onwards, resource creations are no longer allowed.</em></span>
        For each task in the resource it will then:
        </p><div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item">
                <p>Invoke all EXECUTE tasks</p>
            </li><li class="listitem" epub:type="list-item">
                <p>Invoke all VERIFY tasks, and for each verify that returns false, execute the respective SYNC tasks.</p>
            </li><li class="listitem" epub:type="list-item">
                <p>If the resource has a parent, and this was the last of it's childrens to be executed, it will
                    invoke any POSTCHILDREN tasks the parent has.</p>
            </li></ul></div><p>
    </p>
    <p>
        <span class="bold"><strong>Cleanup Stage</strong></span>
    </p>
    <p>
        At this final stage it will invoke each action's CLEANUP actions.
    </p>
</section>
    <section class="appendix" title="Appendix A. Common Attributes" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="appendix" id="N403DF"><div class="titlepage"><div><div><h1 class="title">Appendix A. Common Attributes</h1></div></div></div>
    
    <section class="section" title="id" epub:type="division" id="N403E6"><div class="titlepage"><div><div><h2 class="title" style="clear: both">id</h2></div></div></div>
        
        <p>Type: Identifier ( only characters allowed are letters, digits and the following symbols `-_` )</p>
        <p>
            Resource identifier. Must be unique among resource siblings (so no two child of a resource can have the
            same id). For example if you needed a package to be installed before it's service is started, you could use
        </p>
        <pre class="programlisting">test.test { "testid":
  test.test { "testid": } // this won't conflict with the parent resource id since they're not siblings
}

test:test {
  test.test { "testid": } // Those two ids would conflict
  test.test { "testid": } // Those two ids would conflict
}</pre>
    </section>
    <section class="section" title="uid" epub:type="division" id="N403F6"><div class="titlepage"><div><div><h2 class="title" style="clear: both">uid</h2></div></div></div>
        
        <p>Type: Static String</p>
        <p>Resource unique identifier. This is automatically generated and cannot be manually specified. It's value is
            equals to [parent's id].[resource id]</p>
        <pre class="programlisting">test.test { "a":       // This resource uid would be 'a'
  test.test { "b":     // This resource uid would be 'a.b'
    test.test { "c": } // This resource uid would be 'a.b.c'
  }
}</pre>
    </section>
    <section class="section" title="before" epub:type="division" id="N40406"><div class="titlepage"><div><div><h2 class="title" style="clear: both">before</h2></div></div></div>
        
        <p>Type: Resource Query</p>
        <p>Specifies resources which this resource should execute before. For example if you needed a package to be installed
            before it's service is started, you could use</p>
    </section>
    <section class="section" title="after" epub:type="division" id="N40412"><div class="titlepage"><div><div><h2 class="title" style="clear: both">after</h2></div></div></div>
        
        <p>Type: Resource Query</p>
        <p>Specifies resources which this resource should execute after. For example if you needed a package to be installed
            before it's service is started, you could use</p>
        <pre class="programlisting">core.service { after="@id = configfile" }
core.file { "configfile": path="/etc/myserver.conf", before="@id = myserver" }</pre>
    </section>
    <section class="section" title="requires" epub:type="division" id="N40422"><div class="titlepage"><div><div><h2 class="title" style="clear: both">requires</h2></div></div></div>
        
        <p>Type: String</p>
        <p>
            This can be used to specify a dependency on one or more resources, which will be automatically created if
            no matching resource is found. The format is a command separated list of resource types with potential attributes
            equality matching between brackets ( if a resource is created, those attributes will be set in the resource ).
        </p>
        <p>
            Example: this will cause a resource of type test:type1 to be created, as well as a resource of type test.type2 which
            would have the attribute 'test' assigned as 'bla'. Both would be set as dependencies of the test.test resource.
        </p>
        <pre class="programlisting">test.test {
  requires="test:type1,test:type2(test='bla')"
}</pre>
        <p>Example: In this example no resource would be created since 'test.type1' already exists.
            It would be added as a dependency of 'test:test'</p>
        <pre class="programlisting">test.type1 {}
test.test {
  requires="test.type1"
}</pre>
    </section>
    <section class="section" title="notify" epub:type="division" id="N4043C"><div class="titlepage"><div><div><h2 class="title" style="clear: both">notify</h2></div></div></div>
        
        <p>Type: Resource Query</p>
        <p>Specified resources this will be notified after this resource is executed.</p>
    </section>
    <section class="section" title="subscribe" epub:type="division" id="N40448"><div class="titlepage"><div><div><h2 class="title" style="clear: both">subscribe</h2></div></div></div>
        
        <p>Type: Resource Query</p>
        <p>Specified resources which execution will cause this resource to be notified..</p>
    </section>
</section>
    <section class="appendix" title="Appendix B. Built-in functions" xmlns:epub="http://www.idpf.org/2007/ops" epub:type="appendix" id="N40455"><div class="titlepage"><div><div><h1 class="title">Appendix B. Built-in functions</h1></div></div></div>
	
	<section class="section" title="logDebug" epub:type="division" id="N4045C"><div class="titlepage"><div><div><h2 class="title" style="clear: both">logDebug</h2></div></div></div>
		
		<p>
Log a debug message.
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>message</strong></span> : Message to log
</p></li></ul></div>
	</section>
	<section class="section" title="logInfo" epub:type="division" id="N40472"><div class="titlepage"><div><div><h2 class="title" style="clear: both">logInfo</h2></div></div></div>
		
		<p>
Log an informational message.
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>message</strong></span> : Message to log
</p></li></ul></div>
	</section>
	<section class="section" title="logWarning" epub:type="division" id="N40488"><div class="titlepage"><div><div><h2 class="title" style="clear: both">logWarning</h2></div></div></div>
		
		<p>
Log a warning message
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>message</strong></span> : Message to log
</p></li></ul></div>
	</section>
	<section class="section" title="logError" epub:type="division" id="N4049E"><div class="titlepage"><div><div><h2 class="title" style="clear: both">logError</h2></div></div></div>
		
		<p>
Log an error message
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>message</strong></span> : Message to log
</p></li></ul></div>
	</section>
	<section class="section" title="currentDate" epub:type="division" id="N404B4"><div class="titlepage"><div><div><h2 class="title" style="clear: both">currentDate</h2></div></div></div>
		
		<p>
Return the current date in ISO8601 format (yyyy-MM-dd)
		</p>
	</section>
	<section class="section" title="currentDateTime" epub:type="division" id="N404BD"><div class="titlepage"><div><div><h2 class="title" style="clear: both">currentDateTime</h2></div></div></div>
		
		<p>
Return the current date and time in ISO8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
		</p>
	</section>
	<section class="section" title="password" epub:type="division" id="N404C6"><div class="titlepage"><div><div><h2 class="title" style="clear: both">password</h2></div></div></div>
		
		<p>
This function is used to retrieve a password from the credential store. If the password doesn't exist, one will
 be generated based on the provided parameters
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>id</strong></span> : Password id.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>size ( default: 20 )</strong></span> : password size.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>caps ( default: true )</strong></span> : Flag indicating if capital letters are required in the password.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>number ( default: true )</strong></span> : Flag indicating if numbers are required in the password.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>symbols ( default: true )</strong></span> : Flag indicating if symbos are required in the password.
</p></li></ul></div>
	</section>
	<section class="section" title="lfile" epub:type="division" id="N404FC"><div class="titlepage"><div><div><h2 class="title" style="clear: both">lfile</h2></div></div></div>
		
		<p>
This function is used to generate an url to a file contained in a library. This is generally used to generate
 an url to be passed as a 'source' attribute to a 'core.file' resource. For example:
 <code class="code">core.file { path = "/etc/tomcat/server.xml" , source = lfile('tomcat6.xml.ftl') }</code>
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>path</strong></span> : Path to the file.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>encoding ( default: UTF-8 )</strong></span> : encoding
</p></li></ul></div>
	</section>
	<section class="section" title="ufile" epub:type="division" id="N4051D"><div class="titlepage"><div><div><h2 class="title" style="clear: both">ufile</h2></div></div></div>
		
		<p>
Create an url to a user file (files which looked up in any of the configured filestore locations).
		</p>
<p>Parameters:</p>
<div class="itemizedlist" epub:type="list"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>path</strong></span> : File path.
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>url</strong></span> : Optional URL from where the file can be retrieved
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>sha1</strong></span> : Optional SHA1 checksum (in hex format)
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>retrievable ( default: true )</strong></span> : Flag indicating if the file is retrievable using the URL (If a URL is specified and this flag
                    is false, automatic retrieval will not happen and the user will be requested to manually
                    download and put the file in a filestore location).
</p></li><li class="listitem" epub:type="list-item"><p>
<span class="strong"><strong>encoding ( default: UTF-8 )</strong></span> : File encoding.
</p></li></ul></div>
	</section>
</section>
</div></body></html>